name: Flutter Analyzer Workflow

permissions:
  actions: read

on: workflow_call

jobs:
  flutter_ci:
    name: Flutter source code analyzer on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        channel: [stable]
        version: [3.13.8]
        include:
          - os: ubuntu-latest
            flutter_path: /opt/hostedtoolcache/flutter
          - os: macos-latest
            flutter_path: /Users/runner/hostedtoolcache/flutter
      fail-fast: false

    steps:
      - name: 📚 코드 Checkout
        uses: actions/checkout@v4

      - name: 📂 캐싱 불러오기
        uses: actions/cache/restore@v3
        id: cache-flutter
        with:
          path: ${{ matrix.flutter_path }}
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-

      - name: ⬇️ 캐싱 없는 경우 의존성 설치 후 캐시보관
        if: steps.cache-flutter.outputs.cache-hit != 'true'
        uses: ./cacher.yaml

      # - name: 🐦 Flutter 환경설정
      #   uses: subosito/flutter-action@v2
      #   with:
      #     flutter-version: ${{ matrix.version }}
      #     channel: ${{ matrix.channel }}

      # - name: ➕ 의존성 설치
      #   run: flutter pub get
      #   working-directory: ${{ env.working-directory }}

      - name: 🎨 코드 포맷팅 확인
        run: dart format --output=none --set-exit-if-changed .
        working-directory: ${{ env.working-directory }}

      - name: 📈 정적 코드 분석
        run: flutter analyze
        working-directory: ${{ env.working-directory }}

      - name: ✅ 자동화 테스트 분석
        run: flutter test
        working-directory: ${{ env.working-directory }}
